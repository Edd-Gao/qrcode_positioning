cmake_minimum_required(VERSION 2.8.3)
project(qrcode_positioning)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

IF (WIN32)
    #WARNING!!! This is not for compiling, only to provide auto completion in clion in windows
    INCLUDE_DIRECTORIES(
            "c:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include"
            "c:/docker_shared/include"
            "C:/opencv/build/include"
            "C:/local/boost_1_58_0"
    )

    add_executable(test_TCLAP src/unit_test/test-TCLAP.cpp)
else ()
    ## Find catkin macros and libraries
    ## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
    ## is used, also find other catkin packages
    find_package(catkin REQUIRED COMPONENTS
            cv_bridge
            camera_calibration_parsers
            ecl_command_line
            sensor_msgs
            image_transport
            tf2_ros
            )

    ## System dependencies are found with CMake's conventions
    # find_package(Boost REQUIRED COMPONENTS system)
    find_package(OpenCV REQUIRED)

    ## Uncomment this if the package has a setup.py. This macro ensures
    ## modules and global scripts declared therein get installed
    ## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
    # catkin_python_setup()

    ################################################
    ## Declare ROS messages, services and actions ##
    ################################################

    ## To declare and build messages, services or actions from within this
    ## package, follow these steps:
    ## * Let MSG_DEP_SET be the set of packages whose message types you use
    ##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...)
    ## * In the file package.xml:
    ##   * add a build_depend tag for "message_generation"
    ##   * add a build_depend and a run_depend tag for each package in MSG_D
    ##   * If MSG_DEP_SET isn't empty the following dependency has been pull
    ##     but can be declared for certainty nonetheless:
    ##     * add a run_depend tag for "message_runtime"
    ## * In this file (CMakeLists.txt):
    ##   * add "message_generation" and every package in MSG_DEP_SET to
    ##     find_package(catkin REQUIRED COMPONENTS ...)
    ##   * add "message_runtime" and every package in MSG_DEP_SET to
    ##     catkin_package(CATKIN_DEPENDS ...)
    ##   * uncomment the add_*_files sections below as needed
    ##     and list every .msg/.srv/.action file to be processed
    ##   * uncomment the generate_messages entry below
    ##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIE

    ## Generate messages in the 'msg' folder
    # add_message_files(
    #   FILES
    #   Message1.msg
    #   Message2.msg
    # )

    ## Generate services in the 'srv' folder
    # add_service_files(
    #   FILES
    #   Service1.srv
    #   Service2.srv
    # )

    ## Generate actions in the 'action' folder
    # add_action_files(
    #   FILES
    #   Action1.action
    #   Action2.action
    # )

    ## Generate added messages and services with any dependencies listed her
    # generate_messages(
    #   DEPENDENCIES
    #   std_msgs  # Or other packages containing msgs
    # )

    ################################################
    ## Declare ROS dynamic reconfigure parameters ##
    ################################################

    ## To declare and build dynamic reconfigure parameters within this
    ## package, follow these steps:
    ## * In the file package.xml:
    ##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
    ## * In this file (CMakeLists.txt):
    ##   * add "dynamic_reconfigure" to
    ##     find_package(catkin REQUIRED COMPONENTS ...)
    ##   * uncomment the "generate_dynamic_reconfigure_options" section belo
    ##     and list every .cfg file to be processed

    ## Generate dynamic reconfigure parameters in the 'cfg' folder
    # generate_dynamic_reconfigure_options(
    #   cfg/DynReconf1.cfg
    #   cfg/DynReconf2.cfg
    # )

    ###################################
    ## catkin specific configuration ##
    ###################################
    ## The catkin_package macro generates cmake config files for your packag
    ## Declare things to be passed to dependent projects
    ## INCLUDE_DIRS: uncomment this if you package contains header files
    ## LIBRARIES: libraries you create in this project that dependent projec
    ## CATKIN_DEPENDS: catkin_packages dependent projects also need
    ## DEPENDS: system dependencies of this project that dependent projects
    catkin_package(
            #  INCLUDE_DIRS include
            #  LIBRARIES qr-positioning
            #  CATKIN_DEPENDS camera-calibration-parser
            #  DEPENDS system_lib
    )

    ###########
    ## Build ##
    ###########

    ## Specify additional locations of header files
    ## Your package locations should be listed before other locations
    # include_directories(include)
    include_directories(
            ${catkin_INCLUDE_DIRS}
    )

    add_subdirectory(src/library)
    ## Declare a C++ library
    # add_library(qr-positioning
    #   src/${PROJECT_NAME}/qr-positioning.cpp
    # )

    ## Add cmake target dependencies of the library
    ## as an example, code may need to be generated before libraries
    ## either from message generation or dynamic reconfigure
    # add_dependencies(qr-positioning ${${PROJECT_NAME}_EXPORTED_TARGETS} ${

    ## Declare a C++ executable
    add_executable(test_parse_calibration src/unit_test/test_parse_calibration.cpp)

    ## Add cmake target dependencies of the executable
    ## same as for the library above
    # add_dependencies(qr-positioning_node ${${PROJECT_NAME}_EXPORTED_TARGET

    ## Specify libraries to link a library or executable target against
    target_link_libraries(test_parse_calibration
            ${catkin_LIBRARIES}
            )

    find_library(libzbar.so REQUIRED)
    add_executable(test_bar_code src/unit_test/test_bar_code.cpp)
    target_link_libraries(test_bar_code
            ${catkin_LIBRARIES}
            libzbar.so
            )

    add_executable(test_TCLAP src/unit_test/test-TCLAP.cpp)
    target_link_libraries(test_TCLAP
            ${catkin_LIBRARIES}
            )

    add_executable(qrcode_positioning_node src/ros_node/qr_positioning.cpp)
    target_link_libraries(qrcode_positioning_node
            ${catkin_LIBRARIES}
            ${OpenCV_LIBS}
            QRCodeStateEstimation
            )
    #############
    ## Install ##
    #############

    # all install targets should use catkin DESTINATION variables
    # See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

    ## Mark executable scripts (Python etc.) for installation
    ## in contrast to setup.py, you can choose the destination
    # install(PROGRAMS
    #   scripts/my_python_script
    #   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
    # )

    ## Mark executables and/or libraries for installation
    # install(TARGETS qr-positioning qr-positioning_node
    #   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
    #   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
    #   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
    # )

    ## Mark cpp header files for installation
    # install(DIRECTORY include/${PROJECT_NAME}/
    #   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
    #   FILES_MATCHING PATTERN "*.h"
    #   PATTERN ".svn" EXCLUDE
    # )

    ## Mark other files for installation (e.g. launch and bag files, etc.)
    # install(FILES
    #   # myfile1
    #   # myfile2
    #   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
    # )

    #############
    ## Testing ##
    #############

    ## Add gtest based cpp test target and link libraries
    # catkin_add_gtest(${PROJECT_NAME}-test test/test_qr-positioning.cpp)
    # if(TARGET ${PROJECT_NAME}-test)
    #   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
    # endif()

    ## Add folders to be run by python nosetests
    # catkin_add_nosetests(test)

endif ()